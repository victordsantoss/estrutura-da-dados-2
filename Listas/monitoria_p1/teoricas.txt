1 ) (20 pontos ) Sobre algoritimos de ordenação:

a) (5 pontos) E possível afirmar que o algoritmo QuickSort é superior aos algoritmos elementares (ex: ´
BubbleSort, InsertionSort, SelectionSort) em todos os casos? Porquê?
	Não, como o algoritimo do QuickSort é baseado na escolha de um pivô para uma estratégia de divisão e conquista, 
    com um péssimo pivô a sua complexidade pode chegar a O(n2), sendo lento para esses casos, somado a isso, 
    para um conjunto de elementos quase ordenados ou já ordenados, tanto de forma reversa ou normal, 
    o algorítimo de ordenação Insertion Sort se comporta de maneira mais eficiente que o QuickSort.

b) (10 pontos) Explique alguma estratéegia para minimizar o problema apresentado no item (a).
	Uma boa estratégia é aplicarmos uma mediana de 3 para a escolha do elemento pivô, dessa forma, 
    o algoritimo consegue fugir da escolha de um péssimo pivô para a maioria das situações. 

c) (5 pontos) A respeito da estabilidade de um algoritmo de ordenação, defina o conceito de estabilidade e cite 1 algoritmo estável e 1 não estável.
	A estabilidade de um algoritimo baseia-se na forma com a qual ele trata a ordem relativa dos itens iguais, 
    um algoritimo de ordenação é estável se a ordem relativa dos itens iguais não se altera durante o processo de ordenação,
    já um algoritimo instável tem a ordem relativa dos itens iguais mudada durante a ordenação. Um bom exemplo de algoritimo estável é o MergeSort,
    já para exemplo de algoritimo instável temos o QuickSort. 

(30 pontos) 2) Um animado aluno está criando um sistema centralizado que recebe submiss˜oes de
problemas, no estilo do MOJ, por´em ele recebe submissões de diversas regiões do país.
O interessante é que o sistema processa as submissões a cada 5 minutos e por isso recebe muitos dados.
Cada região envia um vetor ordenado pelo tempo decorrido da prova em que a submissão foi feitas, ou seja,
se uma submissão foi feita após 5 minutos de prova ela terá valor 5, se for 15 minutos, será 15.

O sistema deverá processar todas submissões, de todas as regiões. A ordem de processamento das
submissões deverá ser ordenada pelo tempo decorrido da prova, ou seja, a submissão mais antiga (menor
valor de tempo decorrido da prova), independente da região, ´e a que deverá ser feita primeiro.
O problema é relativamente simples, pois como todos os vetores recebidos já estão ordenados, basta criarum algoritmo que junte (intercale) todos os vetores em um único vetor.

Foi pedido a voce que implemente 2 funcoes, uma chamada intercala4 e outra intercala8, estas funcoes
recebem, respectivamente, 4 e 8 conjuntos de um ponteiro do tipo Item e um inteiro do tipo int, sendo,
cada um, o vetor ordenada pelo tempo_de_submissao e deveraá retornar um unico ponteiro do tipo Item
contendo o vetor resultante da intercalacao dos vetores recebidos como parametro. Voce deveraa implementar
da forma mais eficiente possıvel.
Considere que as seguintes macros estão disponıveis para uso:

